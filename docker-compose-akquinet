version: '3.5'

services:
    nginx:
        container_name: ${COMPANY_NAME}_nginx
        build:
            context: nginx/
        volumes:
            - ${APPLICATION_HTDOCS}/${APP_NAME}:/var/www/html/app
            - ${APPLICATION_HTDOCS}/${API_NAME}:/var/www/html/api
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/conf.d
        ports:
            - "${NGINX_HOST_HTTP_APP_PORT}:80"
            - "${NGINX_HOST_HTTP_API_PORT}:8081"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        links:
            - laravel
            # - angularjs
        networks:
            - backend

    laravel:
        container_name: ${COMPANY_NAME}_laravel
        build:
            context: laravel/
            args:
                - INSTALL_GD=${PHP_FPM_INSTALL_GD}
                - INSTALL_COMPRESSION=${PHP_FPM_INSTALL_COMPRESSION}
                - INSTALL_FTP=${PHP_FPM_INSTALL_FTP}
                - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
                - INSTALL_MCRYPT=${PHP_FPM_INSTALL_MCRYPT}
                - INSTALL_PDO_MYSQL=${PHP_FPM_INSTALL_PDO_MYSQL}
                - INSTALL_PDO_POSTGRESQL=${PHP_FPM_INSTALL_PDO_POSTGRESQL}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
                - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
                - INSTALL_JSON_XML=${PHP_FPM_INSTALL_JSON_XML}
                - INSTALL_CURL=${PHP_FPM_INSTALL_CURL}
                - INSTALL_OPENSSL=${PHP_FPM_INSTALL_OPENSSL}
                - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
                - PHP_FPM_PORT=${PHP_FPM_PORT}
                - PHP_FPM_ENV=${APPLICATION_ENV}
        volumes:
            - ${APPLICATION_HTDOCS}/${API_NAME}:/var/www/html/api
        expose:
            - "${PHP_FPM_PORT}"            
        links:
            - postgresql
        networks:
            - backend

    angularjs:
        container_name: ${COMPANY_NAME}_angularjs
        build:
            context: angularjs/
        volumes:
            - ${APPLICATION_HTDOCS}/${APP_NAME}:/usr/src/app
        ports: 
            - "${ANGULARJS_PORT}:4200"
        expose:
            - "${ANGULARJS_PORT}"
        command: /bin/ash -c "yarn install && yarn run start --host 0.0.0.0 --port 4200"
        networks:
            - frontend

    elasticsearch:
        container_name: ${COMPANY_NAME}_elasticsearch
        build:
            context: elk-packages/elasticsearch/
            args:
                ELK_VERSION: ${ELK_VERSION}
        volumes:
            - ./elk-packages/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - elasticsearch:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        environment:
            ES_JAVA_OPTS: "-Xmx256m -Xms256m"
            ELASTIC_PASSWORD: secret
            # Use single node discovery in order to disable production mode and avoid bootstrap checks
            # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
            discovery.type: single-node
        networks:
            - backend

    kibana:
        container_name: ${COMPANY_NAME}_kibana
        build:
            context: elk-packages/kibana/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - ./elk-packages/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
        ports:
            - "5601:5601"
        networks:
            - backend
        depends_on:
            - elasticsearch

    logstash:
        container_name: ${COMPANY_NAME}_logstash
        build:
            context: elk-packages/logstash/
            args:
                ELK_VERSION: ${ELK_VERSION}
        volumes:
            - ./elk-packages/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./elk-packages/logstash/pipeline:/usr/share/logstash/pipeline
        ports:
            - "5000:5000/tcp"
            - "5000:5000/udp"
            - "9600:9600"
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - backend
        depends_on:
            - elasticsearch

    redis:
        container_name: ${COMPANY_NAME}_redis
        build:
            context: redis/
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - backend

    postgresql:
        container_name: ${COMPANY_NAME}_postgresql
        build:
            context: ./postgresql
            dockerfile: Dockerfile
        ports:
            - "${POSTGRES_PORT}:5432"
        volumes:
            - postgres:/var/lib/postgresql/data
            - ${APPLICATION_HTDOCS}/${API_NAME}/database/seeds/CategoryPublicDescriptions.csv:/home/db/CategoryPublicDescriptions.csv
            - ${APPLICATION_HTDOCS}/${API_NAME}/database/seeds/CategoryPublicGeneral.csv:/home/db/CategoryPublicGeneral.csv
            - ${APPLICATION_HTDOCS}/${API_NAME}/database/seeds/CategoryPublicHierarchies.csv:/home/db/CategoryPublicHierarchies.csv
            - ${APPLICATION_HTDOCS}/${API_NAME}/database/seeds/CategoryPublicHierarchiesHighestLevels.csv:/home/db/CategoryPublicHierarchiesHighestLevels.csv
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        networks:
            - backend

networks:
    frontend:
        driver: ${NETWORKS_DRIVER}
    backend:
        driver: ${NETWORKS_DRIVER}

volumes:
    postgres:
        driver: ${VOLUMES_DRIVER}
    elasticsearch:
        driver: ${VOLUMES_DRIVER}