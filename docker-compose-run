#!/bin/bash

# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37
WHITE='\033[1;37m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
LIGHT_BLUE='\033[1;35m'
GREEN='\033[1;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Variáveis de controle
SUBCOMMAND=${1}; shift

# Para a execução do script e exibe uma mensagem
die () 
{
	echo -e
    echo -e "\t- ${RED} $@ ${NC}"
    exit 1
}

# Menu de ajuda dos comandos
help_functions()
{
   echo ""
   echo -e "${WHITE}Exemplo de como usar o comando:${NC} ${YELLOW}${0} <options> <parameters>"
   echo -e "\t${GREEN}<options> Opções de execução no docker-compose:${NC}"
   echo -e "\t\t${LIGHT_BLUE}UP: Sobre os containers usando o docker-compose${NC}"
   echo -e "\t\t${GREEN}<parameters> Parâmetros adicionais do comando:${NC}"
   echo -e "\t\t\t${CYAN}-a Sobe todos os serviços ativos no docker-compose${NC}"
   echo -e "\t\t\t${CYAN}-s Sobe os serviços informados por parãmetro${NC}"
   exit 1 # Exit script after printing help
}

# 
# export_args()
# {
#     echo "Numero de argumentos: ${1}"

#     COUNT=0
#     for ARG in ${2}; do
#         COUNT=`expr ${COUNT} + 1`
#         echo "Argumento ${COUNT}: ${ARG}"
#     done
# }

function dummy() {
   echo "Numero de argumentos: $#"
 
   COUNT=0
   for ARG in $*; do
      COUNT=`expr $COUNT + 1`
      echo "Argumento $COUNT: $ARG"
   done
}

# Cria um novo projeto utilizando os containers do docker
create_project()
{
    # docker-compose-run create nodejs reactjs mongodb --project-name=my-project --htdocs-dir=./../
    echo -e "\t- ${GREEN}Criando novo projeto no ${BLUE}docker${NC} \n"
    set -e
    # set -- # TODO - commands here "$@"
    exec "$@"
}

# Remove todos os containers e volumes criados
clean_containers()
{
    # docker-compose-run clean --all
    # docker-compose-run clean --local
    echo -e "\t- ${GREEN}Limpando os containers do ${BLUE}docker${NC} \n"
    set -e
    # set -- docker container rm -f $(docker container ls -a -q) "$@"
    # set -- docker image rm -f $(docker image ls -a -q) "$@"
    # set -- docker volume rm -f $(docker volume ls -q) "$@"
    # set -- docker network rm $(docker network ls -q) "$@"

    # set -- docker-compose down -v --rmi local "$@"
    exec "$@"
}

# Lista os containers ativos no docker-compose
ps_containers()
{
    # docker-compose-run ps
    echo -e "\t- ${GREEN}Lista de containers do ${BLUE}docker-compose${NC} \n"
    set -e
    # set -- docker-compose ps "$@"
    exec "$@"
}

# Sobre os containers usando o docker-compose
up_containers()
{
    # docker-compose-run up --stack-name=reactjs-redis-postgresql
    echo -e "\t- ${GREEN}Subindo os containers do ${BLUE}docker${NC} \n"
    set -e
    # set -- docker-compose up -d --build nginx php nodejs reactjs redis postgresql mariadb mongodb elasticsearch kibana logstash "$@"
    # set -- docker-compose up -d --build reactjs redis postgresql "$@"
    # set -- docker-compose up -d --build nginx php postgresql "$@"
    exec "$@"
}

# Para os containers locais do docker
down_containers()
{
    # docker-compose-run down --all
    # docker-compose-run down --containers
    echo -e "\t- ${GREEN}Parando os containers do ${BLUE}docker${NC} \n"
    set -e
    set -- docker-compose down "$@"
    exec "$@"
}

# Monta o menu de opções de execução dos comandos
case "${SUBCOMMAND}" in
    # Sobe os containers do docker
    up ) 
        while getopts ":a:s" opt
        do
            case "${opt}" in
                a ) EXECUPALL=1 ;;
                s ) EXECUPCONTAINERS=1 ;;
                \? ) 
                    echo -e "${RED}Opção inválida: -${OPTARG}${NC}"
                    help_functions
                    ;;
                : ) 
                    echo -e "${RED}Opção inválida: -${OPTARG} passe algum argumento${NC}"
                    help_functions
                    ;;
            esac
        done
    ;;
    * ) 
        echo -e "${RED}Opção inválida: -${OPTARG} passe algum argumento válido${NC}"
        help_functions # Imprime o menu de ajuda
        ;;
esac

# Verifica se foi informado alguma instrução de comando
if [ "${1}" = "" ] 
then
    die "<option> argument required, is empty provided!";
fi

if [ "${EXECUPALL}" ] || [ "${EXECUPCONTAINERS}" ] 
then

    # # Exporta os argumentos passados para variáveis
    # echo "Numero de argumentos: ${#}"

    # COUNT=0
    # for ARG in ${*}; do
    #     COUNT=`expr ${COUNT} + 1`
    #     echo "Argumento ${COUNT}: ${ARG}"
    # done

    up_containers
fi

# Print helpFunction in case parameters are empty
# if [ -z "$parameterA" ] || [ -z "$parameterB" ] || [ -z "$parameterC" ]
# then
#    echo -e "${RED}Some or all of the parameters are empty${NC}";
#    helpFunction
# fi

# Begin script in case all parameters are correct

echo "${EXECUPALL}"
echo "${EXECUPCONTAINERS}"

dummy