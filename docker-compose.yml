version: '3.7'

services:
    nginx:
        container_name: ${COMPANY_NAME}_nginx
        build:
            context: ${DOCKER_BUILDS_DIR}/nginx/
        volumes:
            - ${DOCKER_HTDOCS_DIR}/${APP_NAME}:/var/www/html/app
            - ${DOCKER_HTDOCS_DIR}/${API_NAME}:/var/www/html/api
            - ${DOCKER_STORAGE_DIR}/logs/nginx:/var/log/nginx
            - ${DOCKER_BUILDS_DIR}/${NGINX_SITES_PATH}:/etc/nginx/conf.d
        ports:
            - "${NGINX_HOST_HTTP_APP_PORT}:80"
            - "${NGINX_HOST_HTTP_API_PORT}:8081"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        links:
            - php
            - redis
        networks:
            - local_network

    php:
        container_name: ${COMPANY_NAME}_php
        hostname: php
        build:
            context: ${DOCKER_BUILDS_DIR}/php-fpm/
            args:
                - INSTALL_GD=${PHP_FPM_INSTALL_GD}
                - INSTALL_COMPRESSION=${PHP_FPM_INSTALL_COMPRESSION}
                - INSTALL_FTP=${PHP_FPM_INSTALL_FTP}
                - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
                - INSTALL_MCRYPT=${PHP_FPM_INSTALL_MCRYPT}
                - INSTALL_PDO_MYSQL=${PHP_FPM_INSTALL_PDO_MYSQL}
                - INSTALL_PDO_POSTGRESQL=${PHP_FPM_INSTALL_PDO_POSTGRESQL}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
                - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
                - INSTALL_JSON_XML=${PHP_FPM_INSTALL_JSON_XML}
                - INSTALL_CURL=${PHP_FPM_INSTALL_CURL}
                - INSTALL_OPENSSL=${PHP_FPM_INSTALL_OPENSSL}
                - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
                - PHP_FPM_PORT=${PHP_FPM_PORT}
                - PHP_FPM_ENV=${APPLICATION_ENV}
        volumes:
            - ${DOCKER_STORAGE_DIR}/logs/php-fpm:/var/log/php
            - ${DOCKER_HTDOCS_DIR}/${API_NAME}:/var/www/html/api
        expose:
            - "${PHP_FPM_PORT}"            
        links:
            - redis
        networks:
            - local_network

    redis:
        container_name: ${COMPANY_NAME}_redis
        build:
            context: ${DOCKER_BUILDS_DIR}/redis/
        ports:
            - "${REDIS_PORT}:6379"
        volumes:
            # - ${DOCKER_STORAGE_DIR}/data/redis:/data
            - redis:/data
        networks:
            - local_network

    postgresql:
        container_name: ${COMPANY_NAME}_postgresql
        build:
            context: ${DOCKER_BUILDS_DIR}/postgresql
            dockerfile: Dockerfile
        ports:
            - "${POSTGRES_PORT}:5432"
        volumes:
            # - ${DOCKER_STORAGE_DIR}/data/postgres:/var/lib/postgresql
            - postgresql:/var/lib/postgresql
            - ${DOCKER_HTDOCS_DIR}/${API_NAME}/database/seeds:/home/db/seeds
            - ${DOCKER_HTDOCS_DIR}/${API_NAME}/database/migrations:/home/db/migrations
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        networks:
            - local_network

    mariadb:
        container_name: ${COMPANY_NAME}_mariadb
        build:
            context: ${DOCKER_BUILDS_DIR}/mariadb
            dockerfile: Dockerfile
        ports:
            - "${MARIADB_PORT}:3306"
        volumes:
            # - ${DOCKER_STORAGE_DIR}/data/mysql:/var/lib/mysql
            - mariadb:/var/lib/mysql
            - ${DOCKER_HTDOCS_DIR}/${API_NAME}/database/seeds:/home/db/seeds
            - ${DOCKER_HTDOCS_DIR}/${API_NAME}/database/migrations:/home/db/migrations
        environment:
            - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
            - MYSQL_DATABASE=${MARIADB_DB}
            - MYSQL_USER=${MARIADB_USER}
            - MYSQL_PASSWORD=${MARIADB_PASSWORD}
            - MYSQL_ROOT_HOST=%
        networks:
            - local_network

    mongodb:
        container_name: ${COMPANY_NAME}_mongodb
        build:
            context: ${DOCKER_BUILDS_DIR}/mongodb
            args: 
                - MONGODB_VERSION=${MONGODB_VERSION}
            dockerfile: Dockerfile
        ports:
            - "${MONGODB_PORT}:27017"
        volumes:
            - mongodb:/data/db
            - ${DOCKER_STORAGE_DIR}/logs/mongodb/:/var/log/mongodb/
            - ${DOCKER_BUILDS_DIR}/mongodb/init.d/:/docker-entrypoint-initdb.d/
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
            - MONGO_INITDB_DATABASE=${MONGODB_DB}
        networks:
            - local_network

    # elasticsearch:
    #     container_name: ${COMPANY_NAME}_elasticsearch
    #     build:
    #         context: ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/elasticsearch/
    #         args:
    #             ELK_VERSION: ${ELK_VERSION}
    #     volumes:
    #         # - ${DOCKER_STORAGE_DIR}/data/elasticsearch:/usr/share/elasticsearch/data
    #         - elasticsearch:/usr/share/elasticsearch/data
    #         - ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    #     ports:
    #         - "9200:9200"
    #         - "9300:9300"
    #     environment:
    #         ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    #         ELASTIC_PASSWORD: secret
    #         discovery.type: single-node
    #     networks:
    #         - local_network

    # kibana:
    #     container_name: ${COMPANY_NAME}_kibana
    #     build:
    #         context: ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/kibana/
    #         args:
    #             ELK_VERSION: ${ELK_VERSION}
    #     volumes:
    #         - ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    #     ports:
    #         - "5601:5601"
    #     networks:
    #         - local_network
    #     depends_on:
    #         - elasticsearch

    # logstash:
    #     container_name: ${COMPANY_NAME}_logstash
    #     build:
    #         context: ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/logstash/
    #         args:
    #             ELK_VERSION: ${ELK_VERSION}
    #     volumes:
    #         - ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    #         - ${DOCKER_BUNDLES_DIR}/${ELK_BUNDLE_DIR}/logstash/pipeline:/usr/share/logstash/pipeline
    #     ports:
    #         - "5000:5000/tcp"
    #         - "5000:5000/udp"
    #         - "9600:9600"
    #     environment:
    #         LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    #     networks:
    #         - local_network
    #     depends_on:
    #         - elasticsearch        

networks:
    local_network:
        driver: ${DOCKER_NETWORKS_DRIVER}

volumes:
    mongodb:
        driver: ${DOCKER_VOLUMES_DRIVER}
    mariadb:
        driver: ${DOCKER_VOLUMES_DRIVER}
    postgresql:
        driver: ${DOCKER_VOLUMES_DRIVER}
    redis:
        driver: ${DOCKER_VOLUMES_DRIVER}
    elasticsearch:
        driver: ${DOCKER_VOLUMES_DRIVER}